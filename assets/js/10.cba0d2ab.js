(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{324:function(e,t,r){"use strict";r.r(t);var n=r(6),a=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"源码资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#源码资料"}},[e._v("#")]),e._v(" 源码资料")]),e._v(" "),t("p",[e._v("https://github.com/viabtc/viabtc_exchange_server\ndocker部署\nhttps://github.com/gyk001/viabtc_exchange_server_docker/blob/master/README-zh.md")]),e._v(" "),t("h3",{attrs:{id:"验证case"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#验证case"}},[e._v("#")]),e._v(" 验证Case")]),e._v(" "),t("p",[t("strong",[e._v("市场操作")]),e._v('\n今天的指定的市场的查询：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "market.status_today", "params": ["BTCBCH"], "id": 1516681174}\'\n指定的市场的最新价格：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "market.last", "params":["BTCBCH"], "id":1}\'\n指定市场的指定时间区间的：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "market.status", "params": ["BTCBCH", 120], "id": 1}\'')]),e._v(" "),t("p",[e._v('支持的交易对（市场）：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "market.list", "params": [], "id": 1516681174}\'')]),e._v(" "),t("p",[e._v('指定的市场的成交历史：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "market.deals", "params":["BTCBCH",100, 10000], "id":1}\'\nmethod: market.deals\nparams:\nmarket:\nlimit: count，no more than 10000\nlast_id: id limit')]),e._v(" "),t("p",[e._v('指定用户的市场的成交历史：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "market.user_deals", "params":[10,"BTCBCH",0, 100], "id":1}\'')]),e._v(" "),t("p",[e._v("method: market.user_deals\nparams:\nuser_id: user ID，Integer\nmarket: market name，String\noffset: offset，Integer\nlimit: limit，Integer")]),e._v(" "),t("p",[e._v('获取k线:\ncurl  http://127.0.0.1:18080/ -d \'{"method":"market.kline","params":["BTCBCH",1655037800,1655037840,60], "id":1}\'')]),e._v(" "),t("p",[e._v("method: market.kline\nparams:\nmarket: market\nstart: start，Integer\nend: end, Integer\ninterval: interval, Integer")]),e._v(" "),t("p",[t("strong",[e._v("交易操作")]),e._v('\n限价交易：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "order.put_limit", "params":[2, "BTCBCH", 2, "10", "8000", "0.002", "0.001", "hello"], "id":1111111 }\'')]),e._v(" "),t("p",[e._v("method: order.put_limit\nparams:\nuser_id: user ID，Integer\nmarket: market name，String\nside: 1: sell, 2: buy，Integer\namount: count，String\npride: price，String\ntaker_fee_rate: String, taker fee\nmaker_fee_rate: String, maker fee\nsource: String, source，up to 30 bytes")]),e._v(" "),t("p",[e._v('市价交易：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "order.put_market", "params":[20, "BTCBCH", 2, "10",  "0.002",  "hello"], "id":20 }\'\nmethod: order.put_market\nparams:\nuser_id: user ID，Integer\nmarket: market name，String\nside: 1: sell, 2: buy，Integer\namount: count or amount，String\ntaker_fee_rate: taker fee\nsource: String, source，up to 30 bytes')]),e._v(" "),t("p",[e._v("取消订单:\nmethod: order.cancel\nparams:\nuser_id: user ID\nmarket：market\norder_id： order ID")]),e._v(" "),t("p",[e._v("订单详情:\nmethod: order.deals\nparams:\norder_id: order ID, Integer\noffset\nlimit")]),e._v(" "),t("p",[e._v('订单列表:\ncurl  http://127.0.0.1:18080/ -d \'{"method": "order.book", "params":["BTCBCH", 2, 0, 100], "id":1}\'')]),e._v(" "),t("p",[e._v("method: order.book\nparams:\nmarket:\nside: side，1：sell，2：buy\noffset:(0)\nlimit:(最大101)")]),e._v(" "),t("p",[e._v('订单深度：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "order.depth", "params":["BTCBCH", 101, "60"], "id":1}\'\nmethod: order.depth\nparams:\nmarket：market name\nlimit: count limit，Integer\ninterval: interval，String, e.g. "1" for 1 unit interval, "0" for no interval')]),e._v(" "),t("p",[e._v('某user的pending订单列表：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "order.pending", "params":[3, "BTCBCH", 0, 100], "id":1}\'\nmethod: order.pending\nparams:\nuser_id: user ID，Integer\nmarket: market name，String\noffset: offset，Integer\nlimit: limit，Integer')]),e._v(" "),t("p",[e._v('某个订单ID的详情（其实比上面pending没多信息）：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "order.pending_detail", "params":["BTCBCH", 1], "id":1}\'\nmethod: order.pending_detail\nparams:\nmarket:\norder_id: order ID，Integer')]),e._v(" "),t("p",[t("strong",[e._v("资产操作")]),e._v('：\n查询资产\ncurl  http://127.0.0.1:18080/ -d \'{"method": "balance.query", "params":[1], "id":1 }\'')]),e._v(" "),t("p",[e._v("method: balance.query\nparams: unfixed parameters, first parameter is user ID, followed by list of asset names. Return to user's overall asset if the list is blank.")]),e._v(" "),t("p",[e._v('改变资产:\ncurl  http://127.0.0.1:18080/ -d \'{"method": "balance.update", "params":[1,"BTC", "deposit", 100, "1.2345",  ""a""], "id":1 }\'')]),e._v(" "),t("p",[e._v("method: balance.update\nparams:\nuser_id: user ID，Integer\nasset: asset name，String\nbusiness: business type，String\nbusiness_id: business ID(同一个id只会更新一次，用于幂等)，Integer, but it will only succeed once with multiple operations of the same user_id, asset, business or business_id\nchange: balance change，String, negative numbers for deduction\ndetail: Json object，attached information")]),e._v(" "),t("p",[e._v('支持的资产：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "asset.list", "params":[], "id":0}\'')]),e._v(" "),t("p",[e._v('内存所有资产的总额：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "asset.summary", "params":[], "id":0}\'')]),e._v(" "),t("p",[e._v('查询一个user的账户变动历史：\ncurl  http://127.0.0.1:18080/ -d \'{"method": "balance.history", "params":[1,"BTC", "", 0, 0, 0, 10], "id":1}\'')]),e._v(" "),t("p",[e._v("method: balance.history\nparams:\nuser_id: user ID, Integer\nasset: asset name，which can be null\nbusiness: business，which can be null，use ',' to separate types\nstart_time: start time，0 for unlimited，Integer\nend_time: end time，0 for unlimited, Integer\noffset: offset position，Integer\nlimit: count limit，Integer")]),e._v(" "),t("p",[t("strong",[e._v("kafka")]),e._v("\nkafka-topics.sh --zookeeper zookeeper:2181  --list\nbalances\ndeals\norders")]),e._v(" "),t("h3",{attrs:{id:"代码说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码说明"}},[e._v("#")]),e._v(" 代码说明")]),e._v(" "),t("h4",{attrs:{id:"accesshttp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#accesshttp"}},[e._v("#")]),e._v(" accesshttp")]),e._v(" "),t("p",[e._v("init_methods_handler， 输入的method的所有参赛值都在这里初始化的\non_http_request, 对外的接口")]),e._v(" "),t("p",[e._v("失败没有回滚的操作，比如order_put里面的balance操作失败，都没有回滚操作\n多开了几个线程，把成交的记录异步刷到mysql")]),e._v(" "),t("h3",{attrs:{id:"network"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#network"}},[e._v("#")]),e._v(" network")]),e._v(" "),t("p",[e._v("标准的reactor模式，底层是libev这个开源的简单的异步框架；")]),e._v(" "),t("p",[e._v("nw_sock封装了socker相关的函数(对setsockopt，getpeername, 地址格式, fcntl)；")]),e._v(" "),t("p",[e._v("nw_evt简单的封装了ev_loop")]),e._v(" "),t("p",[e._v("nw_timer对计时器的简单封装，主要是对一些不停复用的参数、操作封装到了函数内部")]),e._v(" "),t("p",[e._v("nw_buf对buffer的管理封装(buf是带有自己管理自己的，用buf_pool和buf是一套；cache是不会自己管理自己的，需要自己去组织这些cache，相当于它不带头，只相当于一个内存池，每个大小的data对应一个独立的cache pool，buf-pool也一样，其实就是类似c++的模板，假如c++实现，其实就是这里void变成了类型，然后输入参数size去掉，变成编译器自己通过类型参数去计算这个size）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("nw_buf是一个buf的实例，多个buf用链表连接，记录了当前data的大小，和data的指针  \n\nnw_buf_pool是一个buf的池，nw_buf的分配和回收都从这个池子中处理，它负责真正的分配和回收，小于65536个buf，不会回收给os；  \n\nnw_buf_list是一个buf的链表的表头  \n\nnw_cache是一个和pool类似的结构体，，内部字段唯一区别是free_arr类型不一样  \n")])])]),t("p",[e._v("nw_ses对socket的，evloop的事件的简单封装，可以读写一个ses，把时间隐藏起来，关联到读写网络的回调上，读写用到了上面的buf pool")]),e._v(" "),t("p",[e._v("nw_svr对server的socket、cli的socket的交互的封装，可以listen多个addr；可以不同addr")]),e._v(" "),t("p",[e._v("nw_clt:是对client的封装，可以断线自动重连，对res的一些不涉及client方面的接口做了屏蔽，公共的实现放在这个封装里面：on_connect, on_error, on_close")]),e._v(" "),t("p",[e._v("nw_job其实就是初始化的时候启动几个线程（"),t("strong",[e._v("nw_job")]),e._v("），然后不停的从队列里面去获取任务去执行任务("),t("strong",[e._v("nw_job_entry")]),e._v(")，任务怎么执行是规定的回调接口")]),e._v(" "),t("p",[e._v("（"),t("strong",[e._v("nw_job_type")]),e._v("），然后使用方只需要把任务丢到队列里面，它就可以异步执行完成；然后通过pipe管道做异步的通知到主线程，主线程监听这个pip的read事件；")]),e._v(" "),t("p",[e._v("疑问点：add-job，和pip的read事件触发之后，都是是要通过获取锁，去访问公共数据结构链表的，这里可能灰度导致主线程睡眠，主线程最好做的不睡眠，无锁的通知；")]),e._v(" "),t("p",[e._v("优化点：add-job，其实是一写多读，可以优化成无锁的单向链表；pipe也一样，它是多写一读，也可以做成无锁单向链表，还是通过pipe做通知，通知需要告诉主线程是哪个队列（cas，ref复制）；")]),e._v(" "),t("p",[e._v("或者add和reply回调的信息，都通过pipe完整的传输，而不是仅仅通过pipe做通知，最终还是得去竞争锁；")]),e._v(" "),t("p",[e._v("nw_state: 其实就是一个带超时的缓存，用哈希表存信息，超时则回调；比如一个request发了之后，通过这个state缓存这个req的seq，超时则处理，没超时就正常返回则从stat删除这个seq的信息；")]),e._v(" "),t("h4",{attrs:{id:"单epoll"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单epoll"}},[e._v("#")]),e._v(" 单EPOLL")]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/f2faeb2d61e61b4f4e5f054d13501173.png",alt:"f2faeb2d61e61b4f4e5f054d13501173.png"}})]),e._v(" "),t("h4",{attrs:{id:"多epoll"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多epoll"}},[e._v("#")]),e._v(" 多EPOLL")]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/f60f752e88b7b834a2a01bddbd03ee18.png",alt:"f60f752e88b7b834a2a01bddbd03ee18.png"}})])])}),[],!1,null,null,null);t.default=a.exports}}]);